//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using CommonLibrary;
using System.Collections.Generic;

using UnityFramework.Misc.Pool;
using UnityFramework.Engine.Core;


namespace UnityFramework.Engine.Mgr
{
	public class TimerManager : Singlton<TimerManager>,IFrameworkUpdator
	{
		private List<TimerTick> ticks;
		private List<TimerTick> cycle;
		private TimerManager ()
		{

		}

		override protected void Initializer()
		{
			ticks = new List<TimerTick> ();
			cycle = new List<TimerTick> ();
		}

		public void Startup()
		{
			ObjectPool.Instance.CreateObjectPool<TimerTick> (ObjectPool.CAPACITY);
		}

		public void AddTimer(int delay,Action<int> callback,int repeat)
		{
			TimerTick tick = ObjectPool.Instance.GetObjectInstance<TimerTick> ();
			tick.delay = delay;
			tick.handler = callback;
			tick.repeat = repeat;
			tick.time = 0;
			ticks.Add(tick);
		}

		public void RemoveTimer(Action<int> callback)
		{
			foreach (TimerTick tick in ticks) 
			{
				if(tick.handler == callback)
				{
					ticks.Remove(tick);
					break;
				}
			}
		}

		public void FixedUpdate(int delta)
		{
			if (ticks.Count > 0) 
			{
				foreach(TimerTick tick in ticks)
				{
					tick.time += delta;
					if(tick.time >= tick.delay && (tick.execute < tick.repeat || tick.repeat < 0))
					{
						//call callback and repeat +1
						tick.execute++;
						tick.handler(tick.execute);
						tick.time = 0;
						if(tick.execute == tick.repeat)
						{
							cycle.Add (tick);
						}
					}
				}

				if (cycle.Count > 0) 
				{
					foreach(TimerTick tick in cycle)
					{
						ticks.Remove(tick);
					}
					cycle.Clear();
				}
			}
		}
	}

	class TimerTick : IPoolable
	{
		public int delay = 1000;
		public Action<int> handler;
		public int time = 0;
		public int repeat = 0;
		public int execute = 0;
		public void Reset()
		{
			delay = 1000;
			time = 0;
			repeat = 0;
			handler = null;
			execute = 0;
		}

		public void Dispose()
		{

		}
	}
}

